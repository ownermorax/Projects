import os
import html
import telebot
from threading import Thread
from openai import OpenAI
from threading import Thread
import time
from telebot import types

BOT_TOKEN = "your_token"

bot = telebot.TeleBot(BOT_TOKEN)

client = OpenAI(api_key='your_api', base_url="https://openrouter.ai/api/v1",)

chat_contexts = {}
gpt_typing = {}
waiting_for_file = {}

def typing(chat_id):
    while gpt_typing.get(chat_id, 1) == 0:
        bot.send_chat_action(chat_id, "typing")
        time.sleep(5)

def create_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    explain_btn = types.KeyboardButton("üìù –û–±—ä—è—Å–Ω–∏—Ç—å –∫–æ–¥")
    analyze_btn = types.KeyboardButton("üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞")
    reset_btn = types.KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥")
    markup.add(explain_btn, analyze_btn, reset_btn)
    return markup

def create_reset_button(chat_id):
    markup = types.InlineKeyboardMarkup()
    reset_button = types.InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data=f"reset_{chat_id}")
    markup.add(reset_button)
    return markup

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    welcome_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî @GodOfCodeRobot, —Ç–≤–æ–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.

–Ø –º–æ–≥—É:
- üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ (Python, JavaScript –∏ –¥—Ä.)
- üìö –û–±—ä—è—Å–Ω—è—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
- ‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
- üí° –û–±—ä—è—Å–Ω—è—Ç—å IT-–∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–¥ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–º–æ–≥—É!

–ö–æ–º–∞–Ω–¥—ã:
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/reset - —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º:
"""
    with open('image.jpg', 'rb') as photo:
        bot.send_photo(message.chat.id, photo, welcome_text, reply_markup=create_main_menu())

@bot.message_handler(commands=['reset'])
def reset_conversation(message):
    chat_id = message.chat.id
    if chat_id in chat_contexts:
        del chat_contexts[chat_id]
    if chat_id in waiting_for_file:
        del waiting_for_file[chat_id]
    bot.reply_to(message, "üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.", reply_markup=create_main_menu())

@bot.callback_query_handler(func=lambda call: call.data.startswith('reset_'))
def reset_callback(call):
    chat_id = int(call.data.split('_')[1])
    if chat_id in chat_contexts:
        del chat_contexts[chat_id]
    if chat_id in waiting_for_file:
        del waiting_for_file[chat_id]
    bot.send_message(chat_id, "üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.", reply_markup=create_main_menu())
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda message: message.text == "üìù –û–±—ä—è—Å–Ω–∏—Ç—å –∫–æ–¥")
def request_code_explanation(message):
    chat_id = message.chat.id
    waiting_for_file[chat_id] = "explain"
    bot.send_message(chat_id, "üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –∫–æ–¥–æ–º, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å.", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda message: message.text == "üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞")
def request_code_analysis(message):
    chat_id = message.chat.id
    waiting_for_file[chat_id] = "analyze"
    bot.send_message(chat_id, "üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –∫–æ–¥–æ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda message: message.text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥")
def reset_conversation_button(message):
    reset_conversation(message)

def process_code_file(chat_id, file_content, action):
    if chat_id not in chat_contexts:
        chat_contexts[chat_id] = [
            {"role": "system", "content": """–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤. 
            –¢—ã —É–º–µ–µ—à—å:
            1. –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
            2. –ù–∞—Ö–æ–¥–∏—Ç—å –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            3. –û–±—ä—è—Å–Ω—è—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
            4. –û–±—ä—è—Å–Ω—è—Ç—å IT-–∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, —É—è–∑–≤–∏–º–æ—Å—Ç–∏, –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
            
            –û—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–≥–¥–∞ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ."""}
        ]
    
    if action == "explain":
        user_message = f"–û–±—ä—è—Å–Ω–∏ —ç—Ç–æ—Ç –∫–æ–¥ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ:\n```\n{file_content}\n```"
    else: 
        user_message = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥, –Ω–∞–π–¥–∏ –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:\n```\n{file_content}\n```"
    
    chat_contexts[chat_id].append({"role": "user", "content": user_message})
    
    try:
        response = client.chat.completions.create(
            model="deepseek/deepseek-r1:free",
            messages=chat_contexts[chat_id],
        )
        
        ai_response = response.choices[0].message.content
        chat_contexts[chat_id].append({"role": "assistant", "content": ai_response})
        
        markup = create_reset_button(chat_id)
        bot.send_message(chat_id, ai_response, parse_mode="Markdown", reply_markup=create_main_menu())
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=create_main_menu())

def split_long_message(message, max_length=4096):
    message = str(message)
    if len(message) <= max_length:
        return [message]
    
    parts = []
    while message:
        if len(message) > max_length:
            split_pos = message.rfind('\n', 0, max_length)
            if split_pos == -1:
                split_pos = max_length
            part = message[:split_pos]
            message = message[split_pos:].lstrip()
        else:
            part = message
            message = ''
        parts.append(part)
    return parts

@bot.message_handler(content_types=['text'])
def handle_text(message):
    chat_id = message.chat.id
    user_input = message.text.strip()
    
    if not user_input:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
        
    if chat_id in waiting_for_file:
        bot.send_message(chat_id, "–Ø –æ–∂–∏–¥–∞—é —Ñ–∞–π–ª —Å –∫–æ–¥–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel.", reply_markup=create_main_menu())
        return
        
    gpt_typing[chat_id] = 0
    th = Thread(target=typing, args=(chat_id,))
    th.start()
    
    if chat_id not in chat_contexts:
        chat_contexts[chat_id] = [
            {
                "role": "system", 
                "content": """–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.                 
                –û—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–≥–¥–∞ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ."""
            }
        ]
    
    chat_contexts[chat_id].append({"role": "user", "content": user_input})

    try:
        response = client.chat.completions.create(
            model="deepseek/deepseek-r1:free", 
            messages=chat_contexts[chat_id],
        )
        
        ai_response = response.choices[0].message.content
        chat_contexts[chat_id].append({"role": "assistant", "content": ai_response})
        
        message_parts = split_long_message(ai_response, 4096)
        
        markup = create_reset_button(chat_id)
        for part in message_parts:
            try:
                if part == message_parts[0]:
                    bot.send_message(chat_id, part, parse_mode='Markdown', reply_markup=create_main_menu())
                else:
                    bot.send_message(chat_id, part, parse_mode='Markdown')
            except Exception as e:
                try:
                    if part == message_parts[0]:
                        bot.send_message(chat_id, part, reply_markup=create_main_menu())
                    else:
                        bot.send_message(chat_id, part)
                except Exception as e:
                    bot.send_message(chat_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
                    
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        gpt_typing[chat_id] = 1

@bot.message_handler(content_types=['document'])
def handle_code_file(message):
    chat_id = message.chat.id
    action = waiting_for_file.get(chat_id)
    
    if not action:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫: '–û–±—ä—è—Å–Ω–∏—Ç—å –∫–æ–¥' –∏–ª–∏ '–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞'.", reply_markup=create_main_menu())
        return
    
    gpt_typing[chat_id] = 0
    th = Thread(target=typing, args=(chat_id, ))
    th.start()
    
    try:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        file_path = f"temp_{message.document.file_name}"
        with open(file_path, 'wb') as f:
            f.write(downloaded_file)
        
        with open(file_path, 'r', encoding='utf-8') as f:
            code_content = f.read()
        
        os.remove(file_path)
        
        process_code_file(chat_id, code_content, action)
        
        if chat_id in waiting_for_file:
            del waiting_for_file[chat_id]
            
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}", reply_markup=create_main_menu())
    finally:
        gpt_typing[chat_id] = 1
        if chat_id in waiting_for_file:
            del waiting_for_file[chat_id]

if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
