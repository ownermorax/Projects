import telebot
from telebot import types
from telebot.apihelper import ApiException
import json
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = ''
CONFIG_FILE = 'channels_config.json'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
def load_config():
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, 'r') as f:
            return json.load(f)
    return {}

def save_config(config):
    with open(CONFIG_FILE, 'w') as f:
        json.dump(config, f, indent=4)

def get_user_channels(user_id):
    config = load_config()
    return config.get(str(user_id), [])

def add_user_channel(user_id, channel):
    config = load_config()
    if str(user_id) not in config:
        config[str(user_id)] = []
    if channel not in config[str(user_id)]:
        config[str(user_id)].append(channel)
    save_config(config)

def remove_user_channel(user_id, channel):
    config = load_config()
    if str(user_id) in config and channel in config[str(user_id)]:
        config[str(user_id)].remove(channel)
        save_config(config)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
def check_bot_permissions(bot, chat_id):
    try:
        chat = bot.get_chat(chat_id)
        if chat.type == 'channel':
            member = bot.get_chat_member(chat_id, bot.get_me().id)
            return member.can_edit_messages
        return False
    except Exception:
        return False

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_states = {}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    help_text = """
üì¢ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏

üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/addchannel - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
/mychannels - –º–æ–∏ –∫–∞–Ω–∞–ª—ã
/newpost - —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
/addbuttons - –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
/editbuttons - –∏–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫–∏
/addalertbutton - –∫–Ω–æ–ø–∫–∞
/listalerts

‚ö†Ô∏è –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:
1. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞
2. –ò–º–µ—Ç—å –ø—Ä–∞–≤–æ "–ò–∑–º–µ–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è"

–§–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–æ–∫:
–¢–µ–∫—Å—Ç - URL
–ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
–ü—Ä–∏–º–µ—Ä:
–ö—É–ø–∏—Ç—å - https://example.com
–ü–æ–¥—Ä–æ–±–Ω–µ–µ - https://example.com/details
"""
    bot.reply_to(message, help_text)

@bot.message_handler(commands=['addchannel'])
def add_channel(message):
    msg = bot.send_message(message.chat.id, "üì¢ –í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä @my_channel –∏–ª–∏ -1001234567890):\n\n"
                                          "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞!")
    bot.register_next_step_handler(msg, process_add_channel)

def process_add_channel(message):
    try:
        channel = message.text.strip()
        if not channel.startswith(('@', '-100')):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–Ω–∞–ª–∞")
            
        if not check_bot_permissions(bot, channel):
            bot.reply_to(message, f"‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ {channel}.\n"
                                "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–æ–º '–ò–∑–º–µ–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è'.")
            return
            
        add_user_channel(message.from_user.id, channel)
        bot.reply_to(message, f"‚úÖ –ö–∞–Ω–∞–ª {channel} –¥–æ–±–∞–≤–ª–µ–Ω!")
        
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(commands=['mychannels'])
def list_channels(message):
    channels = get_user_channels(message.from_user.id)
    if not channels:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addchannel")
        return
    
    response = "üì¢ –í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n\n" + "\n".join(f"{i+1}. {channel}" for i, channel in enumerate(channels))
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏", callback_data="manage_channels"))
    
    bot.reply_to(message, response, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    try:
        if call.data == 'manage_channels':
            show_channel_management(call)
        elif call.data == 'back_to_channels':
            list_channels(call.message)
        elif call.data.startswith('remove_'):
            remove_channel(call)
        elif call.data.startswith('newpost_'):
            start_new_post(call)
        elif call.data.startswith('addbuttons_'):
            start_add_buttons(call)
            
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

def show_channel_management(call):
    channels = get_user_channels(call.from_user.id)
    markup = types.InlineKeyboardMarkup()
    for channel in channels:
        markup.add(types.InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {channel}", callback_data=f"remove_{channel}"))
    markup.add(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_channels"))
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="üóë –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=markup
    )

def remove_channel(call):
    channel = call.data.split('_')[1]
    remove_user_channel(call.from_user.id, channel)
    bot.answer_callback_query(call.id, f"–ö–∞–Ω–∞–ª {channel} —É–¥–∞–ª–µ–Ω")
    list_channels(call.message)

def start_new_post(call):
    channel = call.data.split('_')[1]
    user_states[call.from_user.id] = {
        'channel': channel,
        'step': 'waiting_post_text'
    }
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ {channel}:"
    )

def start_add_buttons(call):
    channel = call.data.split('_')[1]
    if not check_bot_permissions(bot, channel):
        bot.answer_callback_query(
            call.id,
            f"–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ {channel}",
            show_alert=True
        )
        return
        
    user_states[call.from_user.id] = {
        'channel': channel,
        'step': 'waiting_message_id_for_buttons'
    }
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"üî¢ –í–≤–µ–¥–∏—Ç–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {channel} –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫:\n\n"
             "‚ÑπÔ∏è ID –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, –ø–µ—Ä–µ—Å–ª–∞–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É @getidsbot"
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('step') == 'waiting_post_text')
def process_post_text(message):
    try:
        user_id = message.from_user.id
        channel = user_states[user_id]['channel']
        user_states[user_id] = {
            'channel': channel,
            'post_text': message.text,
            'step': 'waiting_buttons'
        }
        
        bot.send_message(message.chat.id, "‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                       "–¢–µ–∫—Å—Ç - URL\n"
                                       "–ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏\n\n"
                                       "–ü—Ä–∏–º–µ—Ä:\n"
                                       "–ö—É–ø–∏—Ç—å - https://example.com\n"
                                       "–ü–æ–¥—Ä–æ–±–Ω–µ–µ - https://example.com/details")
    
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        if user_id in user_states:
            del user_states[user_id]


@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('step') == 'waiting_buttons')
def process_post_buttons(message):
    try:
        user_id = message.from_user.id
        channel = user_states[user_id]['channel']
        post_text = user_states[user_id]['post_text']
        
        markup = create_markup_from_text(message.text)
        
        
        bot.send_message(
            chat_id=channel,
            text=post_text,
            reply_markup=markup
        )
        
        bot.send_message(message.chat.id, f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {channel}!")
        del user_states[user_id]
        
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        if user_id in user_states:
            del user_states[user_id]

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('step') == 'waiting_message_id_for_buttons')
def process_message_id_for_buttons(message):
    try:
        user_id = message.from_user.id
        channel = user_states[user_id]['channel']
        msg_id = int(message.text.strip())
        
        user_states[user_id] = {
            'channel': channel,
            'message_id': msg_id,
            'step': 'waiting_buttons_to_add'
        }
        
        bot.send_message(message.chat.id, "üõ† –í–≤–µ–¥–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                       "–¢–µ–∫—Å—Ç - URL\n"
                                       "–ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏")
    
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID —Å–æ–æ–±—â–µ–Ω–∏—è.")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        if user_id in user_states:
            del user_states[user_id]


@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('step') == 'waiting_buttons_to_add')
def process_add_buttons_to_message(message):
    try:
        user_id = message.from_user.id
        if user_id not in user_states:
            bot.reply_to(message, "‚è≥ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
            
        channel = user_states[user_id]['channel']
        msg_id = user_states[user_id]['message_id']
        
        try:
            chat_member = bot.get_chat_member(channel, bot.get_me().id)
            if not chat_member.can_edit_messages:
                bot.reply_to(message, f"‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ {channel}")
                del user_states[user_id]
                return
        except Exception as e:
            bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {str(e)}")
            del user_states[user_id]
            return
        
        buttons_text = message.text
        
        markup = types.InlineKeyboardMarkup()
        
        for line in buttons_text.split('\n'):
            if '-' in line:
                try:
                    text, url = [part.strip() for part in line.split('-', 1)]
                    if not url.startswith(('http://', 'https://')):
                        url = 'https://' + url
                    markup.add(types.InlineKeyboardButton(text=text, url=url))
                except ValueError:
                    continue
        
        try:
            bot.edit_message_reply_markup(
                chat_id=channel,
                message_id=msg_id,
                reply_markup=markup
            )
            bot.send_message(message.chat.id, f"‚úÖ –ö–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ {channel}!")
            
        except ApiException as e:
            error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:\n"
            if "message not found" in str(e):
                error_msg += "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID."
            elif "not enough rights" in str(e):
                error_msg += "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
            else:
                error_msg += str(e)
            bot.reply_to(message, error_msg)
        
        del user_states[user_id]
        
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        if user_id in user_states:
            del user_states[user_id]

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def create_markup_from_text(buttons_text):
    markup = types.InlineKeyboardMarkup()
    for line in buttons_text.split('\n'):
        if '-' in line:
            try:
                text, url = [part.strip() for part in line.split('-', 1)]
                if not url.startswith(('http://', 'https://')):
                    url = 'https://' + url
                markup.add(types.InlineKeyboardButton(text=text, url=url))
            except ValueError:
                continue
    return markup

def get_message_text(bot, chat_id, message_id):
    try:
        message = bot.get_chat_message(chat_id, message_id)
        return message.text
    except Exception:
        return ""

def handle_edit_errors(message, error):
    error_msg = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:\n"
    if "message not found" in str(error):
        error_msg += "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID."
    elif "not enough rights" in str(error):
        error_msg += "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
    elif "message is not modified" in str(error):
        error_msg += "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ."
    else:
        error_msg += str(error)
    bot.reply_to(message, error_msg)

@bot.message_handler(commands=['addbuttons', 'editbuttons'])
def handle_buttons_commands(message):
    channels = get_user_channels(message.from_user.id)
    if not channels:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addchannel")
        return
    
    markup = types.InlineKeyboardMarkup()
    for channel in channels:
        btn_text = "–í—ã–±—Ä–∞—Ç—å" if len(channels) < 5 else channel
        markup.add(types.InlineKeyboardButton(
            btn_text,
            callback_data=f"{message.text[1:]}_{channel}"
        ))
    
    bot.send_message(
        message.chat.id,
        "üì¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:",
        reply_markup=markup
    )
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
alert_buttons = {}

@bot.message_handler(commands=['addalertbutton'])
def add_alert_button(message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º"""
    try:
        channels = get_user_channels(message.from_user.id)
        if not channels:
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addchannel")
            return
        
        bot.send_message(
            message.chat.id,
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "<code>–ö–∞–Ω–∞–ª | ID —Å–æ–æ–±—â–µ–Ω–∏—è | –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ | –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏:\n"
            "<code>@my_channel | 123 | –í–∞–∂–Ω–æ–µ | –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–∏ (—É–∫–∞–∂–∏—Ç–µ —Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏):\n"
            "<code>@my_channel | 123 | –í–∞–∂–Ω–æ–µ | –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</code>\n\n"
            "–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n" + "\n".join(channels),
            parse_mode="HTML"
        )
        
        user_states[message.from_user.id] = {'step': 'waiting_alert_data'}
        
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id, {}).get('step') == 'waiting_alert_data')
def process_alert_button(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º"""
    try:
        parts = [part.strip() for part in message.text.split('|')]
        if len(parts) != 4:
            raise ValueError("–ù—É–∂–Ω–æ 4 —á–∞—Å—Ç–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ |")
            
        channel, msg_id, button_text, alert_text = parts
        msg_id = int(msg_id)
        

        if channel not in get_user_channels(message.from_user.id):
            raise ValueError("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–∏–º –∫–∞–Ω–∞–ª–æ–º")
        try:
            forwarded = bot.forward_message(
                chat_id=message.chat.id,
                from_chat_id=channel,
                message_id=msg_id
            )
            
            if forwarded.reply_markup:
                markup = forwarded.reply_markup
                
                button_exists = False
                for row in markup.keyboard:
                    for btn in row:
                        if btn.text == button_text:
                            btn.callback_data = f"alert_{alert_text.replace('|', ' ')}"
                            button_exists = True
                            break
                    if button_exists:
                        break
                
                if not button_exists:
                    markup.add(types.InlineKeyboardButton(
                        text=button_text,
                        callback_data=f"alert_{alert_text.replace('|', ' ')}"
                    ))
            else:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"alert_{alert_text.replace('|', ' ')}"
                ))
            
            alert_buttons[f"{channel}_{msg_id}_{button_text}"] = alert_text
            
            bot.edit_message_reply_markup(
                chat_id=channel,
                message_id=msg_id,
                reply_markup=markup
            )
            
            bot.reply_to(message, f"‚úÖ –ö–Ω–æ–ø–∫–∞ '{button_text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ {channel} –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {msg_id}!")
            
        except ApiException as e:
            error_msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n"
            if "message not found" in str(e):
                error_msg += "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID."
            elif "not enough rights" in str(e):
                error_msg += "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
            else:
                error_msg += str(e)
            raise Exception(error_msg)
        
    except ValueError as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: {str(e)}\n\n"
                         "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
                         "<code>–ö–∞–Ω–∞–ª | ID —Å–æ–æ–±—â–µ–Ω–∏—è | –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ | –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</code>\n\n"
                         "–ü—Ä–∏–º–µ—Ä:\n"
                         "<code>@my_channel | 123 | –ù–∞–∂–º–∏ –º–µ–Ω—è | –ü—Ä–∏–≤–µ—Ç!</code>",
                         parse_mode="HTML")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        if message.from_user.id in user_states:
            del user_states[message.from_user.id]

@bot.callback_query_handler(func=lambda call: call.data.startswith('alert_'))
def handle_alert_button(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º"""
    try:
        alert_text = call.data[6:].replace(' ', '|')
        
        bot.answer_callback_query(
            callback_query_id=call.id,
            text=alert_text,
            show_alert=True
        )
        
        bot.send_message(
            chat_id=call.message.chat.id,
            text=f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {alert_text}",
            reply_to_message_id=call.message.message_id
        )
        
    except Exception as e:
        try:
            bot.answer_callback_query(
                call.id,
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                show_alert=True
            )
        except:
            pass

@bot.message_handler(commands=['listalerts'])
def list_alert_buttons(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    try:
        user_channels = get_user_channels(message.from_user.id)
        if not user_channels:
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
            return
        
        user_alerts = []
        for key in alert_buttons:
            channel = key.split('_')[0]
            if channel in user_channels:
                user_alerts.append(key)
        
        if not user_alerts:
            bot.reply_to(message, "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏")
            return
        
        response = "üìã –í–∞—à–∏ –∫–Ω–æ–ø–∫–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:\n\n"
        for alert_key in user_alerts:
            parts = alert_key.split('_')
            channel = parts[0]
            msg_id = parts[1]
            btn_text = '_'.join(parts[2:])
            response += f"üîπ {channel} (—Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}):\n–ö–Ω–æ–ø–∫–∞: {btn_text}\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {alert_buttons[alert_key]}\n\n"
        
        bot.reply_to(message, response)
        
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
      
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    bot.infinity_polling()
